// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: SignatureEncryption/SignatureEncryption.proto

package gorpc

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for SignatureEncryption service

func NewSignatureEncryptionEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for SignatureEncryption service

type SignatureEncryptionService interface {
	Encrypt(ctx context.Context, in *EncryptRequest, opts ...client.CallOption) (*EncryptResponse, error)
	Decrypt(ctx context.Context, in *DecryptRequest, opts ...client.CallOption) (*DecryptResponse, error)
}

type signatureEncryptionService struct {
	c    client.Client
	name string
}

func NewSignatureEncryptionService(name string, c client.Client) SignatureEncryptionService {
	return &signatureEncryptionService{
		c:    c,
		name: name,
	}
}

func (c *signatureEncryptionService) Encrypt(ctx context.Context, in *EncryptRequest, opts ...client.CallOption) (*EncryptResponse, error) {
	req := c.c.NewRequest(c.name, "SignatureEncryption.Encrypt", in)
	out := new(EncryptResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *signatureEncryptionService) Decrypt(ctx context.Context, in *DecryptRequest, opts ...client.CallOption) (*DecryptResponse, error) {
	req := c.c.NewRequest(c.name, "SignatureEncryption.Decrypt", in)
	out := new(DecryptResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SignatureEncryption service

type SignatureEncryptionHandler interface {
	Encrypt(context.Context, *EncryptRequest, *EncryptResponse) error
	Decrypt(context.Context, *DecryptRequest, *DecryptResponse) error
}

func RegisterSignatureEncryptionHandler(s server.Server, hdlr SignatureEncryptionHandler, opts ...server.HandlerOption) error {
	type signatureEncryption interface {
		Encrypt(ctx context.Context, in *EncryptRequest, out *EncryptResponse) error
		Decrypt(ctx context.Context, in *DecryptRequest, out *DecryptResponse) error
	}
	type SignatureEncryption struct {
		signatureEncryption
	}
	h := &signatureEncryptionHandler{hdlr}
	return s.Handle(s.NewHandler(&SignatureEncryption{h}, opts...))
}

type signatureEncryptionHandler struct {
	SignatureEncryptionHandler
}

func (h *signatureEncryptionHandler) Encrypt(ctx context.Context, in *EncryptRequest, out *EncryptResponse) error {
	return h.SignatureEncryptionHandler.Encrypt(ctx, in, out)
}

func (h *signatureEncryptionHandler) Decrypt(ctx context.Context, in *DecryptRequest, out *DecryptResponse) error {
	return h.SignatureEncryptionHandler.Decrypt(ctx, in, out)
}
