// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: define/UserManager.proto

package gorpc

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for UserManager service

func NewUserManagerEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for UserManager service

type UserManagerService interface {
	Register(ctx context.Context, in *UserInfo, opts ...client.CallOption) (*Result, error)
	Login(ctx context.Context, in *UserInfo, opts ...client.CallOption) (*Result, error)
	LoginGoogle(ctx context.Context, in *UserInfo, opts ...client.CallOption) (*Result, error)
	Verify(ctx context.Context, in *VerifyInfo, opts ...client.CallOption) (*TokenInfo, error)
	SetMateData(ctx context.Context, in *MateInfo, opts ...client.CallOption) (*Result, error)
	GetMateData(ctx context.Context, in *UserInfo, opts ...client.CallOption) (*MateInfo, error)
	ChangePassword(ctx context.Context, in *UserInfo, opts ...client.CallOption) (*Result, error)
}

type userManagerService struct {
	c    client.Client
	name string
}

func NewUserManagerService(name string, c client.Client) UserManagerService {
	return &userManagerService{
		c:    c,
		name: name,
	}
}

func (c *userManagerService) Register(ctx context.Context, in *UserInfo, opts ...client.CallOption) (*Result, error) {
	req := c.c.NewRequest(c.name, "UserManager.Register", in)
	out := new(Result)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagerService) Login(ctx context.Context, in *UserInfo, opts ...client.CallOption) (*Result, error) {
	req := c.c.NewRequest(c.name, "UserManager.Login", in)
	out := new(Result)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagerService) LoginGoogle(ctx context.Context, in *UserInfo, opts ...client.CallOption) (*Result, error) {
	req := c.c.NewRequest(c.name, "UserManager.LoginGoogle", in)
	out := new(Result)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagerService) Verify(ctx context.Context, in *VerifyInfo, opts ...client.CallOption) (*TokenInfo, error) {
	req := c.c.NewRequest(c.name, "UserManager.Verify", in)
	out := new(TokenInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagerService) SetMateData(ctx context.Context, in *MateInfo, opts ...client.CallOption) (*Result, error) {
	req := c.c.NewRequest(c.name, "UserManager.SetMateData", in)
	out := new(Result)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagerService) GetMateData(ctx context.Context, in *UserInfo, opts ...client.CallOption) (*MateInfo, error) {
	req := c.c.NewRequest(c.name, "UserManager.GetMateData", in)
	out := new(MateInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagerService) ChangePassword(ctx context.Context, in *UserInfo, opts ...client.CallOption) (*Result, error) {
	req := c.c.NewRequest(c.name, "UserManager.ChangePassword", in)
	out := new(Result)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UserManager service

type UserManagerHandler interface {
	Register(context.Context, *UserInfo, *Result) error
	Login(context.Context, *UserInfo, *Result) error
	LoginGoogle(context.Context, *UserInfo, *Result) error
	Verify(context.Context, *VerifyInfo, *TokenInfo) error
	SetMateData(context.Context, *MateInfo, *Result) error
	GetMateData(context.Context, *UserInfo, *MateInfo) error
	ChangePassword(context.Context, *UserInfo, *Result) error
}

func RegisterUserManagerHandler(s server.Server, hdlr UserManagerHandler, opts ...server.HandlerOption) error {
	type userManager interface {
		Register(ctx context.Context, in *UserInfo, out *Result) error
		Login(ctx context.Context, in *UserInfo, out *Result) error
		LoginGoogle(ctx context.Context, in *UserInfo, out *Result) error
		Verify(ctx context.Context, in *VerifyInfo, out *TokenInfo) error
		SetMateData(ctx context.Context, in *MateInfo, out *Result) error
		GetMateData(ctx context.Context, in *UserInfo, out *MateInfo) error
		ChangePassword(ctx context.Context, in *UserInfo, out *Result) error
	}
	type UserManager struct {
		userManager
	}
	h := &userManagerHandler{hdlr}
	return s.Handle(s.NewHandler(&UserManager{h}, opts...))
}

type userManagerHandler struct {
	UserManagerHandler
}

func (h *userManagerHandler) Register(ctx context.Context, in *UserInfo, out *Result) error {
	return h.UserManagerHandler.Register(ctx, in, out)
}

func (h *userManagerHandler) Login(ctx context.Context, in *UserInfo, out *Result) error {
	return h.UserManagerHandler.Login(ctx, in, out)
}

func (h *userManagerHandler) LoginGoogle(ctx context.Context, in *UserInfo, out *Result) error {
	return h.UserManagerHandler.LoginGoogle(ctx, in, out)
}

func (h *userManagerHandler) Verify(ctx context.Context, in *VerifyInfo, out *TokenInfo) error {
	return h.UserManagerHandler.Verify(ctx, in, out)
}

func (h *userManagerHandler) SetMateData(ctx context.Context, in *MateInfo, out *Result) error {
	return h.UserManagerHandler.SetMateData(ctx, in, out)
}

func (h *userManagerHandler) GetMateData(ctx context.Context, in *UserInfo, out *MateInfo) error {
	return h.UserManagerHandler.GetMateData(ctx, in, out)
}

func (h *userManagerHandler) ChangePassword(ctx context.Context, in *UserInfo, out *Result) error {
	return h.UserManagerHandler.ChangePassword(ctx, in, out)
}
